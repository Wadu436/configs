#!/usr/bin/env python3

## Setup script for a new Linux install
## Symlinks configuration files to the proper locations

from pathlib import Path

## User Configuration
# key = destination
# value = list of files to symlink into destination
FILES: dict[str : list[str]] = {"~/": [".zshrc", ".aliases"]}


## Utility functions
def symlinkable(file: Path, target: Path) -> bool:
    if target.exists():
        if target.is_symlink():
            resolved = target.resolve().absolute()
            if not resolved.samefile(file):
                print(
                    f"WARNING: {str(target)!r} already exists and is a symlink to {str(resolved)!r}, not to {str(file)!r}. Skipping."
                )
            else:
                print(
                    f"{str(target)!r} is already a symlink  to {str(file)!r}. Skipping."
                )
        else:
            print(f"WARNING: {str(target)!r} already exists. Skipping.")
        return False
    return True


## Main function
def main():
    cwd = Path.cwd()

    parsedFiles: list[tuple[Path, Path]] = []
    errors = []
    # Verify all files before doing anything
    for destination, files in FILES.items():
        destination = Path(destination).expanduser()
        if not destination.exists() or not destination.is_dir():
            errors.append(f"{str(destination)!r} doesn't exist or is not a directory")
        for file in files:
            file = cwd / file
            if not file.exists() or not file.is_file():
                errors.append(f"{str(file)!r} doesn't exist or is not a file")
            parsedFiles.append((file, destination))

    # If there are any errors, print to screen and exit
    if len(errors) > 0:
        for error in errors:
            print(f"ERROR: {error}")
        print("\nPerhaps the setup is not running in the correct directory?")

    for file, destination in parsedFiles:
        symlink_file = destination / file.name
        if symlinkable(file, symlink_file):
            print(f"Symlinking {file} to {symlink_file}")

            symlink_file.symlink_to(file)


if __name__ == "__main__":
    main()